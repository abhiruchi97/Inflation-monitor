# .github/workflows/render-deploy.yml
name: Scheduled Deploy to Render

on:
  schedule:
    # Runs at 02:00 UTC every day
    - cron: '30 4 * * *'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Changed from 3.x to avoid distutils issue in 3.12
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools  # Add this line to fix distutils error
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          python -m pytest
          
      - name: Deploy to Render
        run: |
          curl -X GET "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"

      # Simplified status notification using environment file
      - name: Record deployment status
        if: always()
        run: |
          echo "DEPLOY_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "DEPLOY_STATUS=${{ job.status }}" >> $GITHUB_ENV

      - name: Create deployment status issue
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = process.env.DEPLOY_STATUS === 'success' ? '✅' : '❌';
            const message = `${status} Deployment Status\n\nTime: ${process.env.DEPLOY_TIME}\nStatus: ${process.env.DEPLOY_STATUS}`;
            
            // First try to find existing deployment status issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.name,
              labels: ['deployment-status'],
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: issues.data[0].number,
                body: message
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.name,
                title: 'Deployment Status Tracking',
                body: message,
                labels: ['deployment-status']
              });
            }
